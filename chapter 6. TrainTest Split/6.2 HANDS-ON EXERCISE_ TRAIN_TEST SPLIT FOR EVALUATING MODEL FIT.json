{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.4"},"colab":{"name":"6.2 HANDS-ON EXERCISE: TRAIN/TEST SPLIT FOR EVALUATING MODEL FIT","provenance":[],"collapsed_sections":[]}},"cells":[{"cell_type":"markdown","metadata":{"id":"RYHShmYkzdsB"},"source":["# Polynomial Regression -Overfitting\n","\n","What if your data is actually more complex than a simple straight line? Surprisingly,\n","you can actually use a linear model to fit nonlinear data. A simple way to do this is to\n","add powers of each feature as new features, then train a linear model on this extended\n","set of features. This technique is called Polynomial Regression"]},{"cell_type":"code","metadata":{"id":"hke1nnxhzdsD","executionInfo":{"status":"ok","timestamp":1626683316000,"user_tz":-330,"elapsed":468,"user":{"displayName":"Sujit Bhattacharyya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg0dYlIcih4Fz2RedwBmLddb4ww8bVOHIN53Ag2tw=s64","userId":"04875689642601900362"}}},"source":["# Some useful Imports\n","\n","import numpy as np\n","import numpy.random as rnd\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","np.random.seed(42)\n","from sklearn.preprocessing import PolynomialFeatures\n","from sklearn.linear_model import LinearRegression"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VGCMErvSzdsE"},"source":["$y = 2.5 + X - 0.5 * X^2 + noise$"]},{"cell_type":"code","metadata":{"id":"h1oKGWifzdsF","executionInfo":{"status":"ok","timestamp":1626683316000,"user_tz":-330,"elapsed":6,"user":{"displayName":"Sujit Bhattacharyya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg0dYlIcih4Fz2RedwBmLddb4ww8bVOHIN53Ag2tw=s64","userId":"04875689642601900362"}}},"source":["# Generate the dataset on which we will test various models.\n","\n","ndata = 30\n","factor = 1\n","X = 6 * np.random.rand(ndata, 1) - 3\n","y = -0.5 * X**2 + X + 2.5 + np.random.randn(ndata, 1)*factor"],"execution_count":2,"outputs":[]},{"cell_type":"raw","metadata":{"id":"RFm-s8HbzdsF"},"source":["plt.plot(X, y, \"b.\", linewidth=3)\n","\n","# plt.legend(loc=\"upper left\")\n","plt.xlabel(\"$x$\", fontsize=18)\n","plt.ylabel(\"$y$\", rotation=0, fontsize=18)\n","plt.axis([-3, 3, -5, 5])\n","plt.title('Scatter plot of a noisy second order polynomial')\n","\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"2Et8N9P4zdsF"},"source":["$y = \\beta_{0} + \\beta_{1}*X$"]},{"cell_type":"code","metadata":{"id":"5B3eznTKzdsG","executionInfo":{"status":"ok","timestamp":1626683316001,"user_tz":-330,"elapsed":6,"user":{"displayName":"Sujit Bhattacharyya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg0dYlIcih4Fz2RedwBmLddb4ww8bVOHIN53Ag2tw=s64","userId":"04875689642601900362"}}},"source":["# generate the polynomial features. In this case, since degree is 1, X_poly will be same as X.\n","\n","degree = 1\n","poly_features = PolynomialFeatures(degree=degree, include_bias=True)\n","X_poly = poly_features.fit_transform(X)"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"t1vUC-1bzdsG","executionInfo":{"status":"ok","timestamp":1626683316002,"user_tz":-330,"elapsed":7,"user":{"displayName":"Sujit Bhattacharyya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg0dYlIcih4Fz2RedwBmLddb4ww8bVOHIN53Ag2tw=s64","userId":"04875689642601900362"}}},"source":["# Do the train/test split.\n","\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X_poly, y, test_size=0.20, random_state=42)"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"hK_pjrfCzdsH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626683317197,"user_tz":-330,"elapsed":1201,"user":{"displayName":"Sujit Bhattacharyya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg0dYlIcih4Fz2RedwBmLddb4ww8bVOHIN53Ag2tw=s64","userId":"04875689642601900362"}},"outputId":"5f23f2a6-d996-4fc7-9429-a305a5461679"},"source":["# Train the model with the training set.\n","\n","lin_reg = LinearRegression()\n","lin_reg.fit(X_train, y_train)"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"3b53yrn9zdsI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626683317197,"user_tz":-330,"elapsed":21,"user":{"displayName":"Sujit Bhattacharyya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg0dYlIcih4Fz2RedwBmLddb4ww8bVOHIN53Ag2tw=s64","userId":"04875689642601900362"}},"outputId":"be2e3fb5-72a8-4e1d-e361-3cff96a61221"},"source":["# Compute the error metrics on the training set.\n","y_train_hat = lin_reg.predict(X_train)\n","\n","#Regression Evaluation Metrics\n","from sklearn import metrics\n","\n","print('MAE:', metrics.mean_absolute_error(y_train, y_train_hat))\n","print('RMSE:', np.sqrt(metrics.mean_squared_error(y_train, y_train_hat)))\n","print('R-squared:', metrics.r2_score(y_train, y_train_hat))"],"execution_count":6,"outputs":[{"output_type":"stream","text":["MAE: 1.1963278531204378\n","RMSE: 1.4777215148981246\n","R-squared: 0.49313576737813514\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"1OPkg9u6zdsI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626683317198,"user_tz":-330,"elapsed":18,"user":{"displayName":"Sujit Bhattacharyya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg0dYlIcih4Fz2RedwBmLddb4ww8bVOHIN53Ag2tw=s64","userId":"04875689642601900362"}},"outputId":"d1a32f06-3f68-4010-fc16-694e9c0785a9"},"source":["# Compute error metrics on the test set.\n","y_test_hat = lin_reg.predict(X_test)\n","\n","print('MAE:', metrics.mean_absolute_error(y_test, y_test_hat))\n","print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_test_hat)))\n","print('R-squared:', metrics.r2_score(y_test, y_test_hat))"],"execution_count":7,"outputs":[{"output_type":"stream","text":["MAE: 1.2314804175584528\n","RMSE: 1.658394138192764\n","R-squared: 0.1118707819537007\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"6RAzPJGHzdsJ"},"source":["$y = \\beta_{0} + \\beta_{1}*X + \\beta_{2}* X^2 + ... + \\beta_{20}* X^{20}$"]},{"cell_type":"code","metadata":{"id":"ySg4sxAIzdsJ","executionInfo":{"status":"ok","timestamp":1626683317198,"user_tz":-330,"elapsed":16,"user":{"displayName":"Sujit Bhattacharyya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg0dYlIcih4Fz2RedwBmLddb4ww8bVOHIN53Ag2tw=s64","userId":"04875689642601900362"}}},"source":["degree = 20\n","poly_features = PolynomialFeatures(degree=degree, include_bias=True)\n","X_poly = poly_features.fit_transform(X)"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"MIgBWskrzdsJ","executionInfo":{"status":"ok","timestamp":1626683317198,"user_tz":-330,"elapsed":16,"user":{"displayName":"Sujit Bhattacharyya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg0dYlIcih4Fz2RedwBmLddb4ww8bVOHIN53Ag2tw=s64","userId":"04875689642601900362"}}},"source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X_poly, y, test_size=0.20, random_state=42)"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"W2qBp-8EzdsK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626683317199,"user_tz":-330,"elapsed":16,"user":{"displayName":"Sujit Bhattacharyya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg0dYlIcih4Fz2RedwBmLddb4ww8bVOHIN53Ag2tw=s64","userId":"04875689642601900362"}},"outputId":"aa52c1a0-a485-424b-85d9-8bc2c393b3a7"},"source":["lin_reg = LinearRegression()\n","lin_reg.fit(X_train, y_train)"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"1u0J7BI5zdsK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626683317199,"user_tz":-330,"elapsed":15,"user":{"displayName":"Sujit Bhattacharyya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg0dYlIcih4Fz2RedwBmLddb4ww8bVOHIN53Ag2tw=s64","userId":"04875689642601900362"}},"outputId":"8a00ec06-c626-4a06-cc36-6b3ae8ba7592"},"source":["y_train_hat = lin_reg.predict(X_train)\n","\n","print('MAE:', metrics.mean_absolute_error(y_train, y_train_hat))\n","print('RMSE:', np.sqrt(metrics.mean_squared_error(y_train, y_train_hat)))\n","print('R-squared:', metrics.r2_score(y_train, y_train_hat))"],"execution_count":11,"outputs":[{"output_type":"stream","text":["MAE: 0.22081955150746904\n","RMSE: 0.4294118865021965\n","R-squared: 0.9571989348757626\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"JxPOYkBSzdsK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626683317201,"user_tz":-330,"elapsed":15,"user":{"displayName":"Sujit Bhattacharyya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg0dYlIcih4Fz2RedwBmLddb4ww8bVOHIN53Ag2tw=s64","userId":"04875689642601900362"}},"outputId":"db711bfb-6e66-4f79-cd7a-21e99daac03b"},"source":["y_test_hat = lin_reg.predict(X_test)\n","\n","print('MAE:', metrics.mean_absolute_error(y_test, y_test_hat))\n","print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_test_hat)))\n","print('R-squared:', metrics.r2_score(y_test, y_test_hat))"],"execution_count":12,"outputs":[{"output_type":"stream","text":["MAE: 10.898197783372536\n","RMSE: 16.50276209886986\n","R-squared: -86.94556186300134\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"LLZ6KXpvzdsK","executionInfo":{"status":"ok","timestamp":1626683317201,"user_tz":-330,"elapsed":14,"user":{"displayName":"Sujit Bhattacharyya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg0dYlIcih4Fz2RedwBmLddb4ww8bVOHIN53Ag2tw=s64","userId":"04875689642601900362"}}},"source":[""],"execution_count":12,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"l6qJfx0pzdsK"},"source":["$y = \\beta_{0} + \\beta_{1}*X + \\beta_{2}*X^2$"]},{"cell_type":"code","metadata":{"id":"e7owWGbqzdsL","executionInfo":{"status":"ok","timestamp":1626683317202,"user_tz":-330,"elapsed":14,"user":{"displayName":"Sujit Bhattacharyya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg0dYlIcih4Fz2RedwBmLddb4ww8bVOHIN53Ag2tw=s64","userId":"04875689642601900362"}}},"source":["degree = 2\n","poly_features = PolynomialFeatures(degree=degree, include_bias=True)\n","X_poly = poly_features.fit_transform(X)"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"id":"AxSC7HnyzdsL","executionInfo":{"status":"ok","timestamp":1626683317202,"user_tz":-330,"elapsed":14,"user":{"displayName":"Sujit Bhattacharyya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg0dYlIcih4Fz2RedwBmLddb4ww8bVOHIN53Ag2tw=s64","userId":"04875689642601900362"}}},"source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X_poly, y, test_size=0.20, random_state=42)"],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"id":"DCzA2syRzdsL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626683317203,"user_tz":-330,"elapsed":15,"user":{"displayName":"Sujit Bhattacharyya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg0dYlIcih4Fz2RedwBmLddb4ww8bVOHIN53Ag2tw=s64","userId":"04875689642601900362"}},"outputId":"5619dbd5-ff53-4cd6-e7da-94fd96ab1530"},"source":["lin_reg = LinearRegression()\n","lin_reg.fit(X_train, y_train)"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"0lIrnM-KzdsL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626683317203,"user_tz":-330,"elapsed":13,"user":{"displayName":"Sujit Bhattacharyya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg0dYlIcih4Fz2RedwBmLddb4ww8bVOHIN53Ag2tw=s64","userId":"04875689642601900362"}},"outputId":"cac71824-8911-49b1-cf1e-b26c77a0c077"},"source":["y_train_hat = lin_reg.predict(X_train)\n","\n","print('MAE:', metrics.mean_absolute_error(y_train, y_train_hat))\n","print('RMSE:', np.sqrt(metrics.mean_squared_error(y_train, y_train_hat)))\n","print('R-squared:', metrics.r2_score(y_train, y_train_hat))"],"execution_count":16,"outputs":[{"output_type":"stream","text":["MAE: 0.6305346130956531\n","RMSE: 0.7766921439783101\n","R-squared: 0.8599754203054258\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"scrolled":true,"id":"YL_zDjJvzdsL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626683317203,"user_tz":-330,"elapsed":12,"user":{"displayName":"Sujit Bhattacharyya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg0dYlIcih4Fz2RedwBmLddb4ww8bVOHIN53Ag2tw=s64","userId":"04875689642601900362"}},"outputId":"fb731438-f7d5-4c7c-f4fe-ee2842059434"},"source":["y_test_hat = lin_reg.predict(X_test)\n","\n","print('MAE:', metrics.mean_absolute_error(y_test, y_test_hat))\n","print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_test_hat)))\n","print('R-squared:', metrics.r2_score(y_test, y_test_hat))"],"execution_count":17,"outputs":[{"output_type":"stream","text":["MAE: 0.768631726689262\n","RMSE: 0.973137304150069\n","R-squared: 0.6941919651035399\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Y5zUwTcGzdsM","colab":{"base_uri":"https://localhost:8080/","height":303},"executionInfo":{"status":"ok","timestamp":1626683318340,"user_tz":-330,"elapsed":1147,"user":{"displayName":"Sujit Bhattacharyya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg0dYlIcih4Fz2RedwBmLddb4ww8bVOHIN53Ag2tw=s64","userId":"04875689642601900362"}},"outputId":"c239cd63-6611-44b1-df2a-a677eb536534"},"source":["## Plot the fitted curve\n","X_new=np.linspace(-3, 3, 100).reshape(100, 1)\n","r2_test=np.round(metrics.r2_score(y_test, y_test_hat),2)\n","rmse_test =np.round ( np.sqrt(metrics.mean_squared_error(y_test, y_test_hat)),2)\n","plt.subplots(figsize=(9,4))\n","style, width, degree = (\"c--\", 4, 2)\n","\n","\n","X_new_poly = poly_features.transform(X_new)\n","yhat_new = lin_reg.predict(X_new_poly)\n","plt.plot(X_new, yhat_new, style, label=str(degree), linewidth=width)\n","\n","plt.plot(X, y, \"b.\")\n","\n","# plt.legend(loc=\"upper left\")\n","plt.xlabel(\"$x$\", fontsize=18)\n","plt.ylabel(\"$y$\", rotation=0, fontsize=18)\n","plt.axis([-3, 3, -5, 5])\n","plt.title('Polynomial Fit - R-Square = {}  RMSE={}'.format(r2_test, rmse_test))\n","plt.legend(['Degree 2'])\n","plt.savefig('fig_6_1.jpg', dpi=1200)\n","plt.show()"],"execution_count":18,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 648x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Ffi_XD_3zdsM","executionInfo":{"status":"ok","timestamp":1626683318341,"user_tz":-330,"elapsed":21,"user":{"displayName":"Sujit Bhattacharyya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg0dYlIcih4Fz2RedwBmLddb4ww8bVOHIN53Ag2tw=s64","userId":"04875689642601900362"}}},"source":[""],"execution_count":18,"outputs":[]},{"cell_type":"code","metadata":{"id":"m6RXgmUBzdsM","executionInfo":{"status":"ok","timestamp":1626683318341,"user_tz":-330,"elapsed":18,"user":{"displayName":"Sujit Bhattacharyya","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg0dYlIcih4Fz2RedwBmLddb4ww8bVOHIN53Ag2tw=s64","userId":"04875689642601900362"}}},"source":[""],"execution_count":18,"outputs":[]}]}